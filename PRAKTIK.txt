Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> the_world_is_flat = True

>>> the_world_is_flat = True
>>> if the_world_is_flat:
	print("Be careful not to fall off!")

	
Be careful not to fall off!
>>> 
>>> 2 + 2
4
>>> 50 - 5*6
20
>>> (50 - 5*6) / 4
5.0
>>> 8 / 5
1.6
>>> 17 / 3
5.666666666666667
>>> 17 // 3
5
>>> 17 % 3
2
>>> 5 * 3 + 2
17
>>> 5 ** 2
25
>>> 2 ** 7
128
>>> width = 20
>>> height = 5 * 9
>>> width * height
900
>>> n
Traceback (most recent call last):
  File "<pyshell#19>", line 1, in <module>
    n
NameError: name 'n' is not defined
>>> 4 * 3.75 - 1
14.0
>>> tax = 12.5 / 100
>>> price = 100.50
>>> price * tax
12.5625
>>> price + _

113.0625
>>> round(_, 2)
113.06
>>> 'spam eggs'
'spam eggs'
>>> 'doesn\'t'
"doesn't"
>>> "doesn't"
"doesn't"
>>> '"Yes," they said.'
'"Yes," they said.'
>>> 
KeyboardInterrupt
>>> "\"Yes,\" they said."

'"Yes," they said.'
>>> '"Isn\'t," they said.'
'"Isn\'t," they said.'
>>> '"Isn\'t," they said.'
'"Isn\'t," they said.'
>>> print('"Isn\'t," they said.')
s = 'First line.\nSecond line.'
SyntaxError: multiple statements found while compiling a single statement
>>> print(s)
Traceback (most recent call last):
  File "<pyshell#34>", line 1, in <module>
    print(s)
NameError: name 's' is not defined
>>> print('C:\some\name')
C:\some
ame
>>> print(r'C:\some\name')
C:\some\name
>>> print("""\
Usage: thingy [OPTIONS]
-h Display this usage message
-H hostname               Hostname to connect to
""")
Usage: thingy [OPTIONS]
-h Display this usage message
-H hostname               Hostname to connect to

>>> 3 * 'un' + 'ium'
'unununium'
>>> 'Py' 'thon'
'Python'
>>> text = ('Put several strings within parentheses '
	'to have them joined together.')
>>> text
'Put several strings within parentheses to have them joined together.'
>>> prefix = 'Py'
>>> prefix 'thon'
SyntaxError: invalid syntax
>>> ('un' * 3) 'ium'
SyntaxError: invalid syntax
>>> ('un' * 3) 'ium'
SyntaxError: invalid syntax
>>> prefix + 'thon'
'Python'
>>> word = 'Python'
>>> word[0]
'P'
>>> word[5]
'n'
>>> word[-1]
'n'
>>> word[-2]
'o'
>>> word[-6]
'P'
>>> word[0:2]
'Py'
>>> word[2:5]
'tho'
>>> word[:2] + word[2:]
'Python'
>>> word[:4] + word[4:]
'Python'
>>> word[:2]
'Py'
>>> word[4:]
'on'
>>> 
>>> word[-2:]
'on'
>>> word[42]
Traceback (most recent call last):
  File "<pyshell#67>", line 1, in <module>
    word[42]
IndexError: string index out of range
>>> word[4:42]
'on'
>>> word[42:]
''
>>> word[0] = 'J'
Traceback (most recent call last):
  File "<pyshell#70>", line 1, in <module>
    word[0] = 'J'
TypeError: 'str' object does not support item assignment
>>> word[2:] = 'py'
Traceback (most recent call last):
  File "<pyshell#71>", line 1, in <module>
    word[2:] = 'py'
TypeError: 'str' object does not support item assignment
>>> 'J' + word[1:]
'Jython'
>>> word[:2] + 'py'
'Pypy'
>>> s = 'supercalifragilisticexpialidocious'
>>> len(s)
34
>>> squares = [1, 4, 9, 16, 25]
>>> squares
[1, 4, 9, 16, 25]
>>> squares[0]
1
>>> squares[-1]
25
>>> squares[-3:]
[9, 16, 25]
>>> squares[:]
[1, 4, 9, 16, 25]
>>> squares + [36, 49, 64, 81, 100]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
>>> cubes = [1, 8, 27, 65, 125]
>>> 4 ** 3
64
>>> cubes[3] = 64
>>> cubes
[1, 8, 27, 64, 125]
>>> cubes.append(216)
>>>  cubes.append(7 ** 3)
 
SyntaxError: unexpected indent
>>> cubes
[1, 8, 27, 64, 125, 216]
>>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
>>> letters

['a', 'b', 'c', 'd', 'e', 'f', 'g']
>>> letters[2:5] = ['C', 'D', 'E']
>>> letters
['a', 'b', 'C', 'D', 'E', 'f', 'g']
>>> letters[2:5] = []
>>> letters
['a', 'b', 'f', 'g']
>>> letters[:] = []
>>> letters
[]
>>> letters = ['a', 'b', 'c', 'd']
>>> len(letters)
4
>>> a = ['a', 'b', 'c']
>>> n = [1, 2, 3]
>>> x = [a, n]
>>> x
[['a', 'b', 'c'], [1, 2, 3]]
>>> x[0]
['a', 'b', 'c']
>>> x[0][1]
'b'
>>> a, b = 0, 1
>>> while a < 10:
 print(a)
    a, b = b, a+b
    
SyntaxError: unexpected indent
>>> i = 256*256
>>> print('The value of i is', i)
The value of i is 65536
>>> a, b = 0, 1
>>> while a < 1000:
 print(a, end=',')



Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> x = int(input("Please enter an integer: "))
Please enter an integer: 42
>>> def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
	print("-- This parrot wouldn't", action, end=' ')
	 print("if you put", voltage, "volts through it.")
	 
SyntaxError: unexpected indent
>>> def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
	print("-- This parrot wouldn't", action, end=' ')
	print("if you put", voltage, "volts through it.")
	print("-- Lovely plumage, the", type)
	print("-- It's", state, "!")

	
>>> 
>>> def function(a):
	pass
function(0, a=0)
SyntaxError: invalid syntax
>>> def function(a):
	pass
function(0, a=0)
SyntaxError: invalid syntax
>>>  def function(a):
	pass
SyntaxError: unexpected indent
>>> def function(a):
	pass

>>> function(0, a=0)
Traceback (most recent call last):
  File "<pyshell#19>", line 1, in <module>
    function(0, a=0)
TypeError: function() got multiple values for argument 'a'
>>> def cheeseshop(kind, *arguments, **keywords):
	print("-- Do you have any", kind, "?")
	print("-- I'm sorry, we're all out of", kind)
	for arg in arguments:
	print(arg)
	
SyntaxError: expected an indented block
>>> def cheeseshop(kind, *arguments, **keywords):
	print("-- Do you have any", kind, "?")
	print("-- I'm sorry, we're all out of", kind)
	for arg in arguments:
		print(arg)
		print("-" * 40)
		for kw in keywords:
		print(kw, ":", keywords[kw])
		
SyntaxError: expected an indented block
>>> cheeseshop("Limburger", "It's very runny, sir.",
	   "It's really very, VERY runny, sir.",
	   shopkeeper="Michael Palin",
	   client="John Cleese",
	   sketch="Cheese Shop Sketch")
Traceback (most recent call last):
  File "<pyshell#34>", line 1, in <module>
    cheeseshop("Limburger", "It's very runny, sir.",
NameError: name 'cheeseshop' is not defined
>>> 
>>> def concat(*args, sep="/"):
	return sep.join(args)
concat("earth", "mars", "venus")
SyntaxError: invalid syntax
>>> def concat(*args, sep="/"):
	return sep.join(args)

>>> concat("earth", "mars", "venus")
'earth/mars/venus'
>>> concat("earth", "mars", "venus", sep=".")
'earth.mars.venus'
>>> list(range(3, 6))
[3, 4, 5]
>>> args = [3, 6]
>>> list(range(*args))
[3, 4, 5]
>>> def parrot(voltage, state='a stiff', action='voom'):
	print("-- This parrot wouldn't", action, end=' ')
	print("if you put", voltage, "volts through it.", end=' ')
	print("E's", state, "!")
	d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
parrot(**d)
SyntaxError: invalid syntax
>>> def parrot(voltage, state='a stiff', action='voom'):
	print("-- This parrot wouldn't", action, end=' ')
	print("if you put", voltage, "volts through it.", end=' ')
	print("E's", state, "!")
	d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}

	
>>> parrot(**d)
Traceback (most recent call last):
  File "<pyshell#53>", line 1, in <module>
    parrot(**d)
NameError: name 'd' is not defined
>>> def make_incrementor(n):
	return lambda x: x + n
f = make_incrementor(42)
SyntaxError: invalid syntax
>>> def make_incrementor(n):
	return lambda x: x + n

>>> f = make_incrementor(42)
>>> f(0)
42
>>> f(1)
43
>>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
>>> pairs.sort(key=lambda pair: pair[1])
>>> pairs
[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
>>> def my_function():
	"""Do nothing, but document it.
No, really, it doesn't do anything.
"""
pass
SyntaxError: invalid syntax
>>> def my_function():
	"""Do nothing, but document it.
No, really, it doesn't do anything.
"""

	
>>> pass
>>> print(my_function.__doc__)
Do nothing, but document it.
No, really, it doesn't do anything.

>>> def f(ham: str, eggs: str = 'eggs') -> str:
print("Annotations:", f.__annotations__)\
		      
SyntaxError: expected an indented block
>>> def f(ham: str, eggs: str = 'eggs') -> str:
	print("Annotations:", f.__annotations__)
	print("Arguments:", ham, eggs)
	return ham + ' and ' + eggs
f('spam')
SyntaxError: invalid syntax
>>> def f(ham: str, eggs: str = 'eggs') -> str:
	print("Annotations:", f.__annotations__)
	print("Arguments:", ham, eggs)
	return ham + ' and ' + eggs

>>> f('spam')
Annotations: {'ham': <class 'str'>, 'eggs': <class 'str'>, 'return': <class 'str'>}
Arguments: spam eggs
'spam and eggs'
>>> >>> x = int(input("Please enter an integer: "))
Please enter an integer: 42
>>> def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
	print("-- This parrot wouldn't", action, end=' ')
	 print("if you put", voltage, "volts through it.")
	 
SyntaxError: unexpected indent
>>> def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
	print("-- This parrot wouldn't", action, end=' ')
	print("if you put", voltage, "volts through it.")
	print("-- Lovely plumage, the", type)
	print("-- It's", state, "!")

	
>>> 
>>> def function(a):
	pass
function(0, a=0)
SyntaxError: invalid syntax
>>> def function(a):
	pass
function(0, a=0)
SyntaxError: invalid syntax
>>>  def function(a):
	pass
SyntaxError: unexpected indent
>>> def function(a):
	pass

>>> function(0, a=0)
Traceback (most recent call last):
  File "<pyshell#19>", line 1, in <module>
    function(0, a=0)
TypeError: function() got multiple values for argument 'a'
>>> def cheeseshop(kind, *arguments, **keywords):
	print("-- Do you have any", kind, "?")
	print("-- I'm sorry, we're all out of", kind)
	for arg in arguments:
	print(arg)
	
SyntaxError: expected an indented block
>>> def cheeseshop(kind, *arguments, **keywords):
	print("-- Do you have any", kind, "?")
	print("-- I'm sorry, we're all out of", kind)
	for arg in arguments:
		print(arg)
		print("-" * 40)
		for kw in keywords:
		print(kw, ":", keywords[kw])
		
SyntaxError: expected an indented block
>>> cheeseshop("Limburger", "It's very runny, sir.",
	   "It's really very, VERY runny, sir.",
	   shopkeeper="Michael Palin",
	   client="John Cleese",
	   sketch="Cheese Shop Sketch")
Traceback (most recent call last):
  File "<pyshell#34>", line 1, in <module>
    cheeseshop("Limburger", "It's very runny, sir.",
NameError: name 'cheeseshop' is not defined
>>> 
>>> def concat(*args, sep="/"):
	return sep.join(args)
concat("earth", "mars", "venus")
SyntaxError: invalid syntax
>>> def concat(*args, sep="/"):
	return sep.join(args)

>>> concat("earth", "mars", "venus")
'earth/mars/venus'
>>> concat("earth", "mars", "venus", sep=".")
'earth.mars.venus'
>>> list(range(3, 6))
[3, 4, 5]
>>> args = [3, 6]
>>> list(range(*args))
[3, 4, 5]
>>> def parrot(voltage, state='a stiff', action='voom'):
	print("-- This parrot wouldn't", action, end=' ')
	print("if you put", voltage, "volts through it.", end=' ')
	print("E's", state, "!")
	d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
parrot(**d)
SyntaxError: invalid syntax
>>> def parrot(voltage, state='a stiff', action='voom'):
	print("-- This parrot wouldn't", action, end=' ')
	print("if you put", voltage, "volts through it.", end=' ')
	print("E's", state, "!")
	d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}

	
>>> parrot(**d)
Traceback (most recent call last):
  File "<pyshell#53>", line 1, in <module>
    parrot(**d)
NameError: name 'd' is not defined
>>> def make_incrementor(n):
	return lambda x: x + n
f = make_incrementor(42)
SyntaxError: invalid syntax
>>> def make_incrementor(n):
	return lambda x: x + n

>>> f = make_incrementor(42)
>>> f(0)
42
>>> f(1)
43
>>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
>>> pairs.sort(key=lambda pair: pair[1])
>>> pairs
[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
>>> def my_function():
	"""Do nothing, but document it.
No, really, it doesn't do anything.
"""
pass
SyntaxError: invalid syntax
>>> def my_function():
	"""Do nothing, but document it.
No, really, it doesn't do anything.
"""

	
>>> pass
>>> print(my_function.__doc__)
Do nothing, but document it.
No, really, it doesn't do anything.

>>> def f(ham: str, eggs: str = 'eggs') -> str:
print("Annotations:", f.__annotations__)\
		      
SyntaxError: expected an indented block
>>> def f(ham: str, eggs: str = 'eggs') -> str:
	print("Annotations:", f.__annotations__)
	print("Arguments:", ham, eggs)
	return ham + ' and ' + eggs
f('spam')
SyntaxError: invalid syntax
>>> def f(ham: str, eggs: str = 'eggs') -> str:
	print("Annotations:", f.__annotations__)
	print("Arguments:", ham, eggs)
	return ham + ' and ' + eggs

>>> f('spam')
Annotations: {'ham': <class 'str'>, 'eggs': <class 'str'>, 'return': <class 'str'>}
Arguments: spam eggs
'spam and eggs'
>>> >>> x = int(input("Please enter an integer: "))
Please enter an integer: 42
>>> def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
	print("-- This parrot wouldn't", action, end=' ')
	 print("if you put", voltage, "volts through it.")
	 
SyntaxError: unexpected indent
>>> def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
	print("-- This parrot wouldn't", action, end=' ')
	print("if you put", voltage, "volts through it.")
	print("-- Lovely plumage, the", type)
	print("-- It's", state, "!")

	
>>> 
>>> def function(a):
	pass
function(0, a=0)
SyntaxError: invalid syntax
>>> def function(a):
	pass
function(0, a=0)
SyntaxError: invalid syntax
>>>  def function(a):
	pass
SyntaxError: unexpected indent
>>> def function(a):
	pass

>>> function(0, a=0)
Traceback (most recent call last):
  File "<pyshell#19>", line 1, in <module>
    function(0, a=0)
TypeError: function() got multiple values for argument 'a'
>>> def cheeseshop(kind, *arguments, **keywords):
	print("-- Do you have any", kind, "?")
	print("-- I'm sorry, we're all out of", kind)
	for arg in arguments:
	print(arg)
	
SyntaxError: expected an indented block
>>> def cheeseshop(kind, *arguments, **keywords):
	print("-- Do you have any", kind, "?")
	print("-- I'm sorry, we're all out of", kind)
	for arg in arguments:
		print(arg)
		print("-" * 40)
		for kw in keywords:
		print(kw, ":", keywords[kw])
		
SyntaxError: expected an indented block
>>> cheeseshop("Limburger", "It's very runny, sir.",
	   "It's really very, VERY runny, sir.",
	   shopkeeper="Michael Palin",
	   client="John Cleese",
	   sketch="Cheese Shop Sketch")
Traceback (most recent call last):
  File "<pyshell#34>", line 1, in <module>
    cheeseshop("Limburger", "It's very runny, sir.",
NameError: name 'cheeseshop' is not defined
>>> 
>>> def concat(*args, sep="/"):
	return sep.join(args)
concat("earth", "mars", "venus")
SyntaxError: invalid syntax
>>> def concat(*args, sep="/"):
	return sep.join(args)

>>> concat("earth", "mars", "venus")
'earth/mars/venus'
>>> concat("earth", "mars", "venus", sep=".")
'earth.mars.venus'
>>> list(range(3, 6))
[3, 4, 5]
>>> args = [3, 6]
>>> list(range(*args))
[3, 4, 5]
>>> def parrot(voltage, state='a stiff', action='voom'):
	print("-- This parrot wouldn't", action, end=' ')
	print("if you put", voltage, "volts through it.", end=' ')
	print("E's", state, "!")
	d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
parrot(**d)
SyntaxError: invalid syntax
>>> def parrot(voltage, state='a stiff', action='voom'):
	print("-- This parrot wouldn't", action, end=' ')
	print("if you put", voltage, "volts through it.", end=' ')
	print("E's", state, "!")
	d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}

	
>>> parrot(**d)
Traceback (most recent call last):
  File "<pyshell#53>", line 1, in <module>
    parrot(**d)
NameError: name 'd' is not defined
>>> def make_incrementor(n):
	return lambda x: x + n
f = make_incrementor(42)
SyntaxError: invalid syntax
>>> def make_incrementor(n):
	return lambda x: x + n

>>> f = make_incrementor(42)
>>> f(0)
42
>>> f(1)
43
>>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
>>> pairs.sort(key=lambda pair: pair[1])
>>> pairs
[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
>>> def my_function():
	"""Do nothing, but document it.
No, really, it doesn't do anything.
"""
pass
SyntaxError: invalid syntax
>>> def my_function():
	"""Do nothing, but document it.
No, really, it doesn't do anything.
"""

	
>>> pass
>>> print(my_function.__doc__)
Do nothing, but document it.
No, really, it doesn't do anything.

>>> def f(ham: str, eggs: str = 'eggs') -> str:
print("Annotations:", f.__annotations__)\
		      
SyntaxError: expected an indented block
>>> def f(ham: str, eggs: str = 'eggs') -> str:
	print("Annotations:", f.__annotations__)
	print("Arguments:", ham, eggs)
	return ham + ' and ' + eggs
f('spam')
SyntaxError: invalid syntax
>>> def f(ham: str, eggs: str = 'eggs') -> str:
	print("Annotations:", f.__annotations__)
	print("Arguments:", ham, eggs)
	return ham + ' and ' + eggs

>>> f('spam')
Annotations: {'ham': <class 'str'>, 'eggs': <class 'str'>, 'return': <class 'str'>}
Arguments: spam eggs
'spam and eggs'
>>> >>> x = int(input("Please enter an integer: "))
Please enter an integer: 42
>>> def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
	print("-- This parrot wouldn't", action, end=' ')
	 print("if you put", voltage, "volts through it.")
	 
SyntaxError: unexpected indent
>>> def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
	print("-- This parrot wouldn't", action, end=' ')
	print("if you put", voltage, "volts through it.")
	print("-- Lovely plumage, the", type)
	print("-- It's", state, "!")

	
>>> 
>>> def function(a):
	pass
function(0, a=0)
SyntaxError: invalid syntax
>>> def function(a):
	pass
function(0, a=0)
SyntaxError: invalid syntax
>>>  def function(a):
	pass
SyntaxError: unexpected indent
>>> def function(a):
	pass

>>> function(0, a=0)
Traceback (most recent call last):
  File "<pyshell#19>", line 1, in <module>
    function(0, a=0)
TypeError: function() got multiple values for argument 'a'
>>> def cheeseshop(kind, *arguments, **keywords):
	print("-- Do you have any", kind, "?")
	print("-- I'm sorry, we're all out of", kind)
	for arg in arguments:
	print(arg)
	
SyntaxError: expected an indented block
>>> def cheeseshop(kind, *arguments, **keywords):
	print("-- Do you have any", kind, "?")
	print("-- I'm sorry, we're all out of", kind)
	for arg in arguments:
		print(arg)
		print("-" * 40)
		for kw in keywords:
		print(kw, ":", keywords[kw])
		
SyntaxError: expected an indented block
>>> cheeseshop("Limburger", "It's very runny, sir.",
	   "It's really very, VERY runny, sir.",
	   shopkeeper="Michael Palin",
	   client="John Cleese",
	   sketch="Cheese Shop Sketch")
Traceback (most recent call last):
  File "<pyshell#34>", line 1, in <module>
    cheeseshop("Limburger", "It's very runny, sir.",
NameError: name 'cheeseshop' is not defined
>>> 
>>> def concat(*args, sep="/"):
	return sep.join(args)
concat("earth", "mars", "venus")
SyntaxError: invalid syntax
>>> def concat(*args, sep="/"):
	return sep.join(args)

>>> concat("earth", "mars", "venus")
'earth/mars/venus'
>>> concat("earth", "mars", "venus", sep=".")
'earth.mars.venus'
>>> list(range(3, 6))
[3, 4, 5]
>>> args = [3, 6]
>>> list(range(*args))
[3, 4, 5]
>>> def parrot(voltage, state='a stiff', action='voom'):
	print("-- This parrot wouldn't", action, end=' ')
	print("if you put", voltage, "volts through it.", end=' ')
	print("E's", state, "!")
	d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
parrot(**d)
SyntaxError: invalid syntax
>>> def parrot(voltage, state='a stiff', action='voom'):
	print("-- This parrot wouldn't", action, end=' ')
	print("if you put", voltage, "volts through it.", end=' ')
	print("E's", state, "!")
	d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}

	
>>> parrot(**d)
Traceback (most recent call last):
  File "<pyshell#53>", line 1, in <module>
    parrot(**d)
NameError: name 'd' is not defined
>>> def make_incrementor(n):
	return lambda x: x + n
f = make_incrementor(42)
SyntaxError: invalid syntax
>>> def make_incrementor(n):
	return lambda x: x + n

>>> f = make_incrementor(42)
>>> f(0)
42
>>> f(1)
43
>>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
>>> pairs.sort(key=lambda pair: pair[1])
>>> pairs
[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
>>> def my_function():
	"""Do nothing, but document it.
No, really, it doesn't do anything.
"""
pass
SyntaxError: invalid syntax
>>> def my_function():
	"""Do nothing, but document it.
No, really, it doesn't do anything.
"""

	
>>> pass
>>> print(my_function.__doc__)
Do nothing, but document it.
No, really, it doesn't do anything.

>>> def f(ham: str, eggs: str = 'eggs') -> str:
print("Annotations:", f.__annotations__)\
		      
SyntaxError: expected an indented block
>>> def f(ham: str, eggs: str = 'eggs') -> str:
	print("Annotations:", f.__annotations__)
	print("Arguments:", ham, eggs)
	return ham + ' and ' + eggs
f('spam')
SyntaxError: invalid syntax
>>> def f(ham: str, eggs: str = 'eggs') -> str:
	print("Annotations:", f.__annotations__)
	print("Arguments:", ham, eggs)
	return ham + ' and ' + eggs

>>> f('spam')
Annotations: {'ham': <class 'str'>, 'eggs': <class 'str'>, 'return': <class 'str'>}
Arguments: spam eggs
'spam and eggs'
>>> 




More On List
>>> fruits = ['orange','apple','pear','banana','kiwi','apple','banana']
>>> fruits.count('apple')
2
>>> fruits.count('tangerine')
0
>>> fruits.count('banana')
2
>>> fruits.index('banana')
3
>>> fruits.index('banana', 4)
6
>>> fruits.reverse()
>>> fruits
['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']
>>> fruits.append('grape')
>>> fruits
['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']
>>> fruits.sort()
>>> fruits
['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']
>>> fruits.pop()
'pear'

* 5.1.1 Using List as Stack

>>> stack = [3, 4, 5]
>>> stack.append(6)
>>> stack.append(7)
>>> stack
[3, 4, 5, 6, 7]
>>> stack.pop()
7
>>> stack
[3, 4, 5, 6]
>>> stack.pop()
6
>>> stack.pop()
5
>>> stack
[3, 4]

* 5.1.2 Using List as Queues
>>> from collections import deque
>>> queue = deque(["Eric", "Jhon", "Michael"])
>>> queue.append("Terry")
>>> queue.append("Graham")
>>> queue.popleft()
'Eric'
>>> queue.popleft()
'Jhon'
>>> queue
deque(['Michael', 'Terry', 'Graham'])

* 5.1.3 List Comprehensions

>>> squares = []
>>> for x in range(10):
...     squares.append(x**2)
...
>>> squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> squares = list(map(lambda x: x**2, range(10)))
>>> squares = [x**2 for x in range(10)]
>>> [(x, y) for x in [1,2,3] for y in [3,4,5] if x != y]
[(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5)]
>>> combs = []
>>> for x in [1,2,3]:
...     for y in [3,1,4]:
...         if x != y:
...             combs.append((x, y))
...
>>> combs
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
>>>
>>> vec = [-4, -2, 0, 2, 4]
>>>
>>> [x*2 for x in vec]
[-8, -4, 0, 4, 8]
>>>
>>> [x for x in vec if x >= 0]
[0, 2, 4]
>>>
>>> [abs(x) for x in vec]
[4, 2, 0, 2, 4]
>>>
>>> freshfruit = ['banana','loganberry','passion fruit']
>>> [weapon.strip() for weapon in freshfruit]
['banana', 'loganberry', 'passion fruit']
>>>
>>> [(x, x**2) for x in range(6)]
[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
>>>
>>> [x, x**2 for x in range(6)]
  File "<stdin>", line 1
    [x, x**2 for x in range(6)]
               ^
SyntaxError: invalid syntax
>>>
>>> vec = [[1,2,3], [4,5,6], [7,8,9]]
>>> [num for elem in vec for num in elem]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> [str(round(pi, i)) for i in range(1,60)]
['3.1', '3.14', '3.142', '3.1416', '3.14159', '3.141593', '3.1415927', '3.14159265', '3.141592654', '3.1415926536', '3.14159265359', '3.14159265359', '3.1415926535898', '3.14159265358979', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793', '3.141592653589793']

* 5.1.4 Nested List Comperhension

>>> matrix = [
...     [1,2,3,4],
...     [5,6,7,8],
...     [9,10,11,12],
... ]
>>> [[row[i] for row in matrix] for i in range(4)]
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
>>> transposed = []
>>> for i in range(4):
...     transposed.append([row[i] for row in matrix])
...
>>> transposed
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
>>> transposd = []
>>> for i in range(4):
...     transposed_row = []
...     for row in matrix:
...         transposed_row.append(row[i])
...     transposed.append(transposed_row)
...
>>> transposed
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12], [1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
>>> list(zip(*matrix))
[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]

* 5.2 The del statement

>>> a = [-1,1,66.25,333,333,1234.5]
>>> del a[0]
>>> a
[1, 66.25, 333, 333, 1234.5]
>>> del a[2:4]
>>> a
[1, 66.25, 1234.5]
>>> del a[:]
>>> a
[]
>>> del a

* 5.3 Tuples and Sequences

>>> t = 12345, 54321, 'hello!'
>>> t[0]
12345
>>> t
(12345, 54321, 'hello!')
>>> u = t, (1,2,3,4,5)
>>> u
((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
>>> t[0] = 88888
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> v = ([1,2,3], [3,2,1])
>>> v
([1, 2, 3], [3, 2, 1])
>>> empty = ()
>>> singleton = 'hello',
>>> len(empty)
0
>>> len(singleton)
1
>>> singleton
('hello',)
>>> x, y, z = t

* 5.4 Sets

>>> basket = {'apple','orange','apple','pear','orange','banana'}
>>> print(basket)
{'orange', 'banana', 'apple', 'pear'}
>>> 'orange' in basket
True
>>> 'crabgrass' in basket
False
>>> a = set('abracadabra')
>>> b = set('alacazam')
>>> a
{'d', 'c', 'b', 'a', 'r'}
>>> a-b
{'b', 'd', 'r'}
>>> a|b
{'d', 'c', 'b', 'a', 'r', 'm', 'z', 'l'}
>>> a&b
{'c', 'a'}
>>> a^b
{'r', 'm', 'z', 'd', 'l', 'b'}
>>> a ={x for x in 'abracadabra' if x not in 'abc'}
>>> a
{'r', 'd'}

* 5.5 Dictioaries

>>> tel = {'jack':4098, 'sape':4139}
>>> tel['guido'] = 4127
>>> tel
{'jack': 4098, 'sape': 4139, 'guido': 4127}
>>> tel['jack']
4098
>>> del tel['sape']
>>> tel['irv'] =4127
>>> tel
{'jack': 4098, 'guido': 4127, 'irv': 4127}
>>> list(tel)
['jack', 'guido', 'irv']
>>> sorted(tel)
['guido', 'irv', 'jack']
>>> 'guido' in tel
True
>>> 'jack' not in tel
False
>>> dict ([('sape',4139), ('guido', 4127), ('jack',4098)])
{'sape': 4139, 'guido': 4127, 'jack': 4098}
>>> {x: x**2 for x in (2,4,6)}
{2: 4, 4: 16, 6: 36}
>>> dict(sape=4139, guido=4127, jack=4098)
{'sape': 4139, 'guido': 4127, 'jack': 4098}

* 5.6 Looping Techniques

>>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}
>>> for k, v in knights.items():
...     print(k, v)
...
gallahad the pure
robin the brave
>>> for i, v in enumerate(['tic', 'tac', 'toe']):
...     print(i, v)
...
0 tic
1 tac
2 toe
>>> questions = ['name', 'quest', 'favorite color']
>>> answers = ['lancelot', 'the holy grail', 'blue']
>>> for q, a in zip(questions, answers):
...     print('What is your {0}?  It is {1}.'.format(q, a))
...
What is your name?  It is lancelot.
What is your quest?  It is the holy grail.
What is your favorite color?  It is blue.
>>> for i in reversed(range(1, 10, 2)):
...     print(i)
...
9
7
5
3
1
>>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
>>> for f in sorted(set(basket)):
...     print(f)
...
apple
banana
orange
pear
>>> import math
>>> raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]
>>> filtered_data = []
>>> for value in raw_data:
...     if not math.isnan(value):
...         filtered_data.append(value)
...
>>> filtered_data
[56.2, 51.7, 55.3, 52.5, 47.8]

* 5.7 More on Conditions

>>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'
>>> non_null = string1 or string2 or string3
>>> non_null
'Trondheim'

* 5.8 Comparing Sequences and Other Types

>>> (1, 2, 3)              < (1, 2, 4)
True
>>> [1, 2, 3]              < [1, 2, 4]
True
>>> 'ABC' < 'C' < 'Pascal' < 'Python'
True
>>> (1, 2, 3, 4)           < (1, 2, 4)
True
>>> (1, 2)                 < (1, 2, -1)
True
>>> (1, 2, 3)             == (1.0, 2.0, 3.0)
True
>>> (1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)
True






